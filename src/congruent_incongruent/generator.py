import random
import numpy as np
import pandas as pd

def generate_stimulus_answer_pairs(seed=None):
  """This is a function that generates a list of stimulus answer pairs.
  trial types are four different types, either initial or final. 
  The stimulus is a number between 1 and 35. The trials are structured in a way that the stimulus 1
  should come with all 4 different conditions ((congruent, congruent), 
  (congruent, incongruent), (incongruent, congruent), (incongruent, incongruent)).
  """
  if seed is not None:
    random.seed(seed)
  df_possible_stimuli = pd.DataFrame(columns=['stimulus', 'question', 'answer'], 
                                     index = range(140))
  df_possible_stimuli['stimulus'] = np.tile(np.arange(1, 36), 4)
  df_possible_stimuli['question'] = np.concatenate([np.tile(['initial'], 70), 
                                                   np.tile(['final'], 70)])
  df_possible_stimuli['answer'] = np.concatenate([np.tile(['initial'], 35), 
                                                  np.tile(['final'], 35), 
                                                  np.tile(['initial'], 35), 
                                                  np.tile(['final'], 35)])

  return df_possible_stimuli.sample(n = 140, replace=False).reset_index(drop=True)


def generate_intertrial_intervals(n_trials, min_intertrial_interval, 
                                  max_intertrial_interval, seed=None):
  """This is a function that generates a list of intertrial intervals.
  The interprials should follow an exponential distribution between min and max in seconds.

  Args:
      n_trials (int): Number of trials
      min_intertrial_interval (float): Minimum intertrial interval in seconds
      max_intertrial_interval (float): Maximum intertrial interval in seconds
      seed (int, optional): Seed for the random number generator. Defaults to None.
  """
  intertrial_intervals = []

  if seed is not None:
    random.seed(seed)

  possible_intervals = np.linspace(min_intertrial_interval, max_intertrial_interval, 50)
  weights = np.exp(-possible_intervals / min_intertrial_interval)
  weights /= weights.sum()

  for i in range(n_trials):
    intertrial_intervals.append(np.random.choice(possible_intervals, p=weights))

  return intertrial_intervals


def generate_intertrial_intervals_torsten(seed=None):
  """This is a function that generates a list of intertrial intervals.
  The interprials should follow an exponential distribution between min and max in seconds.

  Args:
      seed (int, optional): Seed for the random number generator. Defaults to None.
  """
  if seed is not None:
    random.seed(seed)
  intertrials = [2] * 37 + [4] * 19 + [8] * 10 + [16] * 3
  return np.random.choice(intertrials, 69, replace=False).tolist()


def generate_potential_question(trial_index=None, seed=None):
  """This is a function that generates a potential question for the trial.
  The question is generated by adding a random number to the trial index.

  Args:
      trial_index (int): Trial index
      seed (int, optional): Seed for the random number generator. Defaults to None.
  """
  if trial_index is not None and seed is not None:
    random.seed(seed + trial_index)
  potential_questions = ["Bylo v odpovědi vlastní jméno?", "Říkal odpověď muž?",
                        "Říkal odpověď žena?", "Byla odpověď v minulém čase?",
                        "Byla odpověď v přítomném čase?"]
  return random.choice(potential_questions)


def generate_question_trials(seed=None):
  """This is a function that generates a list of question trials.
  the question trials come every 2 3 or 4 trials. There should be 35 trials in total

  Args:
      n_trials (int): Number of trials
      seed (int, optional): Seed for the random number generator. Defaults to None.
  """
  if seed is not None:
    random.seed(seed)
  question_trials = [2] * 5 + [3] * 8 + [4] * 9 + [5] * 8 + [6] * 5
  random.shuffle(question_trials)
  question_trials = np.cumsum(question_trials)
  return question_trials
  