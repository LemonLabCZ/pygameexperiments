import random
import numpy as np


def generate_intertrial_intervals(n_trials, min_intertrial_interval, max_intertrial_interval, seed=None):
  """This is a function that generates a list of intertrial intervals.
  The interprials should follow an exponential distribution between min and max in seconds.

  Args:
      n_trials (int): Number of trials
      min_intertrial_interval (float): Minimum intertrial interval in seconds
      max_intertrial_interval (float): Maximum intertrial interval in seconds
      seed (int, optional): Seed for the random number generator. Defaults to None.
  """
  intertrial_intervals = []

  if seed is not None:
    random.seed(seed)

  possible_intervals = np.linspace(min_intertrial_interval, max_intertrial_interval, 50)
  weights = np.exp(-possible_intervals / min_intertrial_interval)
  weights /= weights.sum()

  for i in range(n_trials):
    intertrial_intervals.append(np.random.choice(possible_intervals, p=weights))

  return intertrial_intervals


def generate_intertrial_intervals_torsten(n_trials, intertrials, weights, seed=None):
  """This is a function that generates a list of intertrial intervals.
  The interprials should follow an exponential distribution between min and max in seconds.

  Args:
      n_trials (int): Number of trials
      intertrials (list): List of intertrial intervals
      weights (list): List of weights for the intertrial intervals
      seed (int, optional): Seed for the random number generator. Defaults to None.
  """
  if seed is not None:
    random.seed(seed)

  return np.random.choice(intertrials, p=weights, size=n_trials).tolist()


def generate_stimulus_answer_intervals(n_trials, min_interval, max_interval, seed=None):
  """This is a function that generates a list of stimulus answer intervals.
  The intervals should follow a simple uniform distribution between min and max in seconds.

  Args:
      n_trials (int): Number of trials
      min_interval (float): Minimum interval in seconds
      max_interval (float): Maximum interval in seconds
      seed (int, optional): Seed for the random number generator. Defaults to None.
  """
  stimulus_answer_intervals = []

  if seed is not None:
    random.seed(seed)

  possible_intervals = np.linspace(min_interval, max_interval, 50)

  for i in range(n_trials):
    stimulus_answer_intervals.append(np.random.choice(possible_intervals))

  return stimulus_answer_intervals


def generate_potential_question(trial_index=None, seed=None):
  """This is a function that generates a potential question for the trial.
  The question is generated by adding a random number to the trial index.

  Args:
      trial_index (int): Trial index
      seed (int, optional): Seed for the random number generator. Defaults to None.
  """
  if trial_index is not None and seed is not None:
    random.seed(seed + trial_index)
  potential_questions = ["Bylo v odpovědi vlastní jméno?", "Říkal odpověď muž?",
                        "Říkal odpověď žena?", "Byla odpověď v minulém čase?",
                        "Byla odpověď v přítomném čase?"]
  return random.choice(potential_questions)